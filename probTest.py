""" This is the main test for prob.py.  It uses the data generator: models/probTestDat.py.
    In order to run, you must first generate the test data using
    python3 synth/synthDataGen.py models/probTestDat.py <numRecords>.  We typically
    test with 100,000 records, so that is the recommended value for numRecords.
"""
from Probability.Prob import Sample
from synth import getData
import sys
import time

def run(filename):
    r = getData.DataReader(filename)
    dat = r.read()
    samp = Sample(dat, density=1, power=1)
    start = time.time()
    print()
    print ('Testing probability module.  Note: values < .15 are considered ~ 0.')
    print()
    print('Testing discrete deterministic probabilities (2-dice -- ala Craps)')
    print('stats(A) =  ', samp.fieldStats('A'))
    print('stats(C) = ', samp.fieldStats('C'))
    a = samp.distr('A')
    mean = a.mean()
    std = a.stDev()
    print('stats(dice1): mean, std, skew, kurtosis = ', mean, std, a.skew(), a.kurtosis(), ' Exp: 3.5, ?, 0, ?')
    c = samp.distr('C')
    print('stats(d1 + d2): mean, std, skew, kurtosis = ', c.E(), c.stDev(), c.skew(), c.kurtosis(), ' Exp: 7, ?, 0, ?')
    print('E(B) = ', samp.distr('B').E(), ' Exp: 3.5')
    print('P(B=0) = ', samp.P(('B', 0)), ' Exp: 0')
    print('P(B=1) = ', samp.P(('B', 1)), ' Exp: 1/6 = .166...')
    print('P(B=2) = ', samp.P(('B', 2)), ' Exp: 1/6 = .166...')
    print('P(B >= 0) = ', samp.P(('B', 0, None)), ' Exp: 1.0')
    print('P(B < 0) = ', samp.P(('B', None, 0)), ' Exp: 0.0')
    print('P(-inf <= B > inf) = ', samp.P(('B', None, None)), ' Exp: 1.0')
    print('P(-1 <= B < 3) = ', samp.P(('B', -1, 3)), ' Exp: 1/3')
    print('P(C = 2) =', samp.P(('C', 2)), ' Exp: 1/36 = .0277...')
    print('P(C = 3) =', samp.P(('C', 3)), ' Exp: 1/18 = .055...')
    print('P( 2 <= C < 4) = ', samp.P(('C', 2, 4)), ' Exp: 3/36 = .0833...')
    print('P( 2 <= C < 4 | A = 1) = ', samp.P(('C', 2, 4), ('B', 1)), ' Exp: 1/3')
    print('P( C = 7) = ', samp.P(('C', 7)), ' Exp: 1/6 = .166...')
    print('P( C = 7 | A = 1, B = 6) = ', samp.P(('C', 7), [('A', 1), ('B', 6)]), ' Exp: 1.0')
    print('P( C = 7 | A >= 2, B < 5) = ', samp.P(('C', 7), [('A', 2, None), ('B', None, 5)]), ' Exp: 1/5 = .2')
    print('P(-inf <= A < inf | B >= 1) = ', samp.P(('A', None, None), ('B', 1, None)), ' Exp: 1.0')
    print('P( A >= 3, B >= 3) = ', samp.P([('A', 3, None), ('B', 3, None)]), 'Exp: 4/9 (.444...)')
    print('P( C = 7, A = 5) = ', samp.P([('C', 7), ('A', 5)]), ' Exp: 1/36 (.0277...)')
    print('P( C = 7, A >= 5) = ', samp.P([('C', 7), ('A', 5, None)]), ' Exp: 1/18 (.0555...)')
    print('P( A = 2 | B = 5, C= 7) = ', samp.P(('A', 2), [('B', 5), ('C', 7)]), ' Exp: 1.0')
    print('P( B = 5, C= 7) = ', samp.P(('B', 5), ('C', 7)), ' Exp: 1/6 (.166...)')
    print('P( A = 2, B = 5) = ', samp.P([('A', 2), ('B', 5)]), ' Exp: 1/36 (.0277...)')
    print('P( A = 2, B = 5 | C = 7) = ', samp.P([('A', 2), ('B', 5)], ('C', 7)), ' Exp: 1/6 (.166...)')
    print('P( A = 2, B = 5, N < 0| C = 7) = ', samp.P([('A', 2), ('B', 5), ('N', None, 0)], ('C', 7)), ' Exp: 1/12 (.08333...)')    
    print('E( C | A = 1, B = 6) = ', samp.distr('C', [('A', 1), ('B', 6)]).E(), ' Exp: 7')
    print('E( C | A = 1, B <= 5) = ', samp.distr('C', [('A', 1), ('B', 5, None)]).E(), ' Exp: 6.5')
    print()
    print('Testing continuous distributions.  Using N = normal(0, 1)')
    n = samp.distr('N')
    mu1 = n.mean()
    mu2 = n.stDev()
    print('stats(N):  mean, std, skew, kurtosis = ', mu1, mu2, n.skew(), n.kurtosis(), 'Exp: (0, 1, 0, 0)')
    print('P( -1 >= N > 1) = ', n.P((-1, 1)), 'Exp: 68.2')
    print('P( -2 >= N > 2) = ', n.P((-2, 2)), 'Exp: 95.4')
    print('P( -3 >= N > 3) = ', n.P((-3, 3)), 'Exp: 99.7')
    print('P( -inf >= N > 0) = ', n.P((None, 0)), 'Exp: .5')
    print('P( 0 >= N > inf) = ', n.P((0, None)), 'Exp: .5')
    print('P( -inf >= N > inf) = ', n.P((None, None)), 'Exp: 1.0')
    n2 = samp.distr('N2')
    print('stats(N2):  mean, std, skew, kurtosis = ', n2.E(), n2.stDev(), n2.skew(), n2.kurtosis(), 'Exp: (1, 1.414, 0, 0)')
    print('E( N2 | N = 1) = ', samp.distr('N2', ('N', 1)).E(), ' Exp: 2.0')
    print('E( N2 | 1 <= N < 2) = ', samp.distr('N2',  ('N', 1, 2)).E())
    print()
    print('Dependence testing:')
    print('A _||_ B = ', samp.dependence('A', 'B'), ' Exp: ~ 0')
    print('A _||_ C = ', samp.dependence('A', 'C'), ' Exp: >> 0')
    print('N _||_ N2 = ', samp.dependence('N', 'N2'), ' Exp: >> 0')
    print('N _||_ C = ', samp.dependence('N', 'C'), ' Exp: ~ 0')
    print('C _||_ N = ', samp.dependence('C', 'N'), ' Exp: ~ 0')
    print('A _||_ B | C >= 8 = ', samp.dependence('A', 'B', [('C', 8, None)]), ' Exp: >> 0')
    print('A _||_ B | C < 7 = ', samp.dependence('A', 'B', [('C', None, 7)]), ' Exp: >> 0')
    print('A _||_ B | C = 7 = ', samp.dependence('A', 'B', [('C', 7)]), ' Exp: >> 0')
    print('A _||_ B | C = 6 = ', samp.dependence('A', 'B', [('C', 6)]), ' Exp: >> 0')
    print('A _||_ B | C = 5 = ', samp.dependence('A', 'B', [('C', 5)]), ' Exp: >> 0')
    print('A _||_ B | C = 4 = ', samp.dependence('A', 'B', [('C', 4)]), ' Exp: >> 0')
    print('A _||_ B | C = 3 = ', samp.dependence('A', 'B', [('C', 3)]), ' Exp: >> 0')
    print('A _||_ B | C = 2 = ', samp.dependence('A', 'B', [('C', 2)]), ' Exp: ~ 0')
    print('A _||_ B | C = 12 = ', samp.dependence('A', 'B', [('C', 12)]), ' Exp: ~ 0')
    print('A _||_ B | C = ', samp.dependence('A', 'B', ['C']), ' Exp: >> 0')
    print()
    print('Testing Conditionalization:')
    ivaDist = samp.distr('IVA')
    ivaMean = ivaDist.E()
    ivaStd = ivaDist.stDev()
    upper = ivaMean + .5
    lower = ivaMean - .5
    diff = upper - lower
    print('test interval = ', upper - lower)
    ivcGupper = samp.E('IVC', ('IVA', upper))
    ivcGlower = samp.E('IVC', ('IVA', lower))
    print('E( IVC | IVA = upper)', ivcGupper)
    print('E( IVC | IVA = lower)', ivcGlower)
    ivcGupper = samp.E('IVC', [('IVA', upper), 'IVB'])
    ivcGlower = samp.E('IVC', [('IVA', lower), 'IVB'])
    print('E( IVC | IVA = upper, IVB)', ivcGupper)
    print('E( IVC | IVA = lower, IVB)', ivcGlower)
    print('ACE(A,C) = ', (ivcGupper - ivcGlower) / diff, ' Exp: ~ 0')
    print()
    print('Testing continuous causal dependence:')
    print('IVB _||_ IVA = ', samp.dependence('IVB', 'IVA'), ' Exp: >> 0')
    print('IVA _||_ IVB = ', samp.dependence('IVA', 'IVB'), ' Exp: >> 0')
    print('IVB _||_ IVC = ', samp.dependence('IVB', 'IVC'), ' Exp: >> 0')
    print('IVA _||_ IVC = ', samp.dependence('IVA', 'IVC'), ' Exp: >> 0')
    print('IVA _||_ IVC | IVB = ', samp.dependence('IVA', 'IVC', 'IVB'), ' Exp: ~ 0')
    print('IVA _||_ IVC | IVB, N = ', samp.dependence('IVA', 'IVC', ['IVB', 'N']), ' Exp: ~ 0')

    print()
    end = time.time()
    duration = end - start
    print('Test Time = ', round(duration))

if __name__ == '__main__':
    filename = 'models/probTestDat.csv'
    run(filename)
